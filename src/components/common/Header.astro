---
import { base, navigation } from '@data/navigation';

// Server-side logic: No data fetching needed for static navigation
// This component is purely presentational and uses Astro's static rendering
---

<!-- 
  Main Header Component
  - Uses mobile-first responsive design (base styles = mobile, lg: = desktop)
  - Implements hamburger menu pattern for mobile screens
  - Leverages Astro's static rendering for optimal performance
-->
<header class="bg-white shadow-sm border-b border-gray-100 sticky top-0 z-50">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- 
      Flex container: Mobile uses column layout with menu button
      Desktop (lg:) uses row layout with inline navigation
    -->
    <div class="flex justify-between items-center h-14">
      <!-- Logo Section: Consistent across all screen sizes -->
      <div class="flex-shrink-0">
        <a href={base} class="flex items-center space-x-3 text-[#b02cf5]">
          <img
            src={base + '/favicon-32x32.png'}
            alt="Site Logo"
            class="h-9 w-auto inline"
          />
          <h3 class="text-2xl font-bold">AstroFit</h3>
        </a>
      </div>

      <!-- 
        Desktop Navigation: Hidden on mobile (hidden), visible on large screens (lg:flex)
        Uses ml-auto to push navigation to the right side
      -->
      <nav class="hidden lg:flex lg:space-x-2 ml-auto uppercase">
        {
          navigation.map((item) => (
            <a
              href={item.href}
              class="text-gray-700 hover:text-violet-700 hover:bg-violet-50 px-3 py-2 text-sm font-medium transition-all duration-200 rounded-md"
            >
              {item.name}
            </a>
          ))
        }
      </nav>

      <!-- 
        Mobile Menu Button: Visible on mobile (lg:hidden), hidden on desktop
        Uses minimal JavaScript for interactivity
      -->
      <button
        id="mobile-menu-button"
        class="lg:hidden inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-violet-600 hover:bg-gray-100 transition-colors cursor-pointer"
        aria-expanded="false"
        aria-controls="mobile-menu"
        aria-label="Toggle navigation menu"
      >
        <!-- Hamburger Icon: Simple SVG for better performance than icon fonts -->
        <svg
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- 
      Mobile Navigation Menu: Hidden by default (hidden), toggleable via JavaScript
      Uses full-width layout with vertical stacking for mobile UX
      Positioned below the main header bar
    -->
    <nav id="mobile-menu" class="hidden lg:hidden pb-4 text-center uppercase">
      <div class="space-y-1">
        {
          navigation.map((item) => (
            <a
              href={item.href}
              class="block px-3 py-2 text-gray-700 hover:text-violet-600 hover:bg-gray-50 rounded-md text-base font-medium transition-colors"
            >
              {item.name}
            </a>
          ))
        }
      </div>
    </nav>
  </div>
</header>

<!-- 
  Mobile menu toggle that works with Astro's client-side navigation
  Uses astro:page-load event to reinitialize after navigation
-->
<script>
  function initMobileMenu() {
    const button = document.getElementById('mobile-menu-button');
    const menu = document.getElementById('mobile-menu');
    const header = document.querySelector('header');

    if (button && menu && header) {
      // Remove existing listeners to prevent duplicates
      button.replaceWith(button.cloneNode(true));
      const newButton = document.getElementById('mobile-menu-button');
      if (!newButton) return;

      // Toggle menu function
      const toggleMenu = (show: boolean) => {
        if (show) {
          menu.classList.remove('hidden');
          newButton.setAttribute('aria-expanded', 'true');
        } else {
          menu.classList.add('hidden');
          newButton.setAttribute('aria-expanded', 'false');
        }
      };

      // Button click handler
      newButton.addEventListener('click', () => {
        const isHidden = menu.classList.contains('hidden');
        toggleMenu(isHidden);
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e: MouseEvent) => {
        if (
          !header.contains(e.target as Node) &&
          !menu.classList.contains('hidden')
        ) {
          toggleMenu(false);
        }
      });
    }
  }

  // Initialize on page load and after navigation
  document.addEventListener('astro:page-load', initMobileMenu);
</script>
